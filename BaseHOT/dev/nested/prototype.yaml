heat_template_version: 2013-05-23
description: 'Prototype HOT for Sample VNF'

parameters:
  flavor:
    type: string
  image:
    type: string
  net1:
    type: string
  net2:
    type: string
  fixed_ip:
    type: string

resources:
  Prototype:
    type: OS::Nova::Server
    properties:
      flavor: { get_param: flavor }
      image: { get_param: image }
      name: Prototype
      networks:
        - port:
            get_resource: internal_CP
        - port:
            get_resource: external_CP
      user_data_format: RAW
      user_data: |
        #!/bin/bash
        sleep 30
        # Create a new user 'nathan'
        sudo useradd -m -s /bin/bash nathan
        # Set a password for the new user
        echo "nathan:stupid" | sudo chpasswd
        # Optionally, add the user to the sudoers file for administrative privileges
        echo "nathan ALL=(ALL) NOPASSWD:ALL" | sudo tee -a /etc/sudoers
        
        # Define network interfaces based on IP ranges
        # Replace these with your actual interface names or detection logic if needed
        INTERNAL_IFACE="ens3"
        EXTERNAL_IFACE="ens4"
        
        # Enable IP forwarding
        echo 1 > /proc/sys/net/ipv4/ip_forward
        echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf
        sysctl -p
        
        # Configure iptables
        iptables -t nat -A POSTROUTING -o $EXTERNAL_IFACE -j MASQUERADE
        iptables -A FORWARD -i $INTERNAL_IFACE -o $EXTERNAL_IFACE -s $INTERNAL_NET -d $EXTERNAL_NET -j ACCEPT
        iptables -A FORWARD -i $EXTERNAL_IFACE -o $INTERNAL_IFACE -m state --state RELATED,ESTABLISHED -j ACCEPT
        
        # Save iptables rules (if necessary, based on your distro)
        # On Debian/Ubuntu
        iptables-save > /etc/iptables/rules.v4


  internal_CP:
    type: OS::Neutron::Port
    properties:
      network: { get_param: net1 }
      fixed_ips:
        - ip_address: { get_param: fixed_ip }
      security_groups:
        - test_secgrp

  external_CP:
    type: OS::Neutron::Port
    properties:
      network: { get_param: net2 }
      security_groups:
        - test_secgrp

  # Will make accessible from ELK network
#  elk_CP:
#    type: OS::Neutron::Port
#    properties:
#      network: { get_param: net3 }
#      security_groups:
#        - test_secgrp