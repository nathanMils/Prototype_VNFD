heat_template_version: 2013-05-23
description: 'Prototype HOT for Sample VNF'

parameters:
  flavor:
    type: string
  image:
    type: string
  net1:
    type: string
  net2:
    type: string
  net3:
    type: string

resources:
  Prototype:
    type: OS::Nova::Server
    properties:
      flavor: { get_param: flavor }
      image: { get_param: image }
      name: Prototype
      networks:
        - port:
            get_resource: internal_CP
        - port:
            get_resource: external_CP
        - port:
            get_resource: elk_CP

  internal_CP:
    type: OS::Neutron::Port
    properties:
      network: { get_param: net1 }
      fixed_ips:
        - ip_address: 10.0.0.254

  external_CP:
    type: OS::Neutron::Port
    properties:
      network: { get_param: net2 }

  elk_CP:
    type: OS::Neutron::Port
    properties:
      network: { get_param: net3 }

  set_ip_table_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
        - name: internal_ip
        - name: external_ip
      config: |
        #!/bin/bash
        echo "Configuring iptables with internal IP $internal_ip and external IP $external_ip"
        
        # Install iptables
        apt-get update
        apt-get install -y iptables
        
        # Enable IP forwarding
        sysctl -w net.ipv4.ip_forward=1
        
        # Identify network interfaces based on IP addresses
        INTERNAL_IFACE=$(ip addr show | grep "$internal_ip" | awk '{print $NF}')
        EXTERNAL_IFACE=$(ip addr show | grep "$external_ip" | awk '{print $NF}')
        
        # Check if interfaces are found
        if [ -z "$INTERNAL_IFACE" ] || [ -z "$EXTERNAL_IFACE" ]; then
          echo "Failed to identify network interfaces."
          exit 1
        fi
        
        # Apply iptables rules
        iptables -A FORWARD -i $INTERNAL_IFACE -o $EXTERNAL_IFACE -j ACCEPT
        iptables -A FORWARD -i $EXTERNAL_IFACE -o $INTERNAL_IFACE -j ACCEPT
        iptables -t nat -A POSTROUTING -o $EXTERNAL_IFACE -j MASQUERADE


  ip_tables_deployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      config: { get_resource: set_ip_table_config }
      server: { get_resource: Prototype }
      input_values:
        internal_ip: { get_attr: [ internal_CP, fixed_ips, 0, ip_address ] }
        external_ip: { get_attr: [ external_CP, fixed_ips, 0, ip_address ] }