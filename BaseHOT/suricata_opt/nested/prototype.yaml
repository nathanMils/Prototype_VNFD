heat_template_version: 2013-05-23
description: 'Prototype HOT for Sample VNF'

parameters:
  flavor:
    type: string
  image:
    type: string
  net1:
    type: string
  net2:
    type: string
  net3:
    type: string

resources:
  Prototype:
    type: OS::Nova::Server
    properties:
      flavor: { get_param: flavor }
      image: { get_param: image }
      name: Prototype
      networks:
        - port:
            get_resource: internal_CP
        - port:
            get_resource: external_CP
        - port:
            get_resource: elk_CP
#      user_data_format: SOFTWARE_CONFIG
#      str_replace:
#        template: |
#          #!/bin/bash
#          #!/bin/bash
#          echo "Configuring iptables with internal IP $internal_ip and external IP $external_ip"
#
#          # Install iptables
#          apt-get update
#          apt-get install -y iptables
#
#          # Enable IP forwarding
#          sysctl -w net.ipv4.ip_forward=1
#
#          # Identify network interfaces based on IP addresses
#          INTERNAL_IFACE=$(ip addr show | grep "$internal_ip" | awk '{print $NF}')
#          EXTERNAL_IFACE=$(ip addr show | grep "$external_ip" | awk '{print $NF}')
#
#          # Check if interfaces are found
#          if [ -z "$INTERNAL_IFACE" ] || [ -z "$EXTERNAL_IFACE" ]; then
#          echo "Failed to identify network interfaces."
#          exit 1
#          fi
#
#          # Apply iptables rules
#          iptables -A FORWARD -i $INTERNAL_IFACE -o $EXTERNAL_IFACE -j ACCEPT
#          iptables -A FORWARD -i $EXTERNAL_IFACE -o $INTERNAL_IFACE -j ACCEPT
#          iptables -t nat -A POSTROUTING -o $EXTERNAL_IFACE -j MASQUERADE
#          iptables -t nat -A POSTROUTING -o $INTERNAL_IFACE -j MASQUERADE
#
#          echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
#        params:
#          $internal_ip: { get_attr: [ internal_CP, fixed_ips, 0, ip_address ] }
#          $external_ip: { get_attr: [ external_CP, fixed_ips, 0, ip_address ] }

  external_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name: External Security Group
      description: Security group for VNFD allowing ping and HTTP traffic
      rules:
        # Rule for allowing ping (ICMP) traffic
        - direction: ingress
          ethertype: IPv4
          protocol: icmp
          remote_ip_prefix: 0.0.0.0/0

        # Rule for allowing HTTP (TCP on port 80) traffic
        - direction: ingress
          ethertype: IPv4
          protocol: tcp
          port_range_min: 80
          port_range_max: 80
          remote_ip_prefix: 0.0.0.0/0

  internal_CP:
    type: OS::Neutron::Port
    properties:
      network: { get_param: net1 }
      fixed_ips:
        - ip_address: 10.0.0.254

  external_CP:
    type: OS::Neutron::Port
    properties:
      network: { get_param: net2 }
      security_groups:
        - default
        - { get_resource: external_security_group }

  elk_CP:
    type: OS::Neutron::Port
    properties:
      network: { get_param: net3 }

#  set_ip_table_config:
#    type: OS::Heat::SoftwareConfig
#    properties:
#      group: script
#      inputs:
#        - name: internal_ip
#        - name: external_ip
#      config: |
#        #!/bin/bash
#        echo "Configuring iptables with internal IP $internal_ip and external IP $external_ip"
#
#        # Install iptables
#        apt-get update
#        apt-get install -y iptables
#
#        # Enable IP forwarding
#        sysctl -w net.ipv4.ip_forward=1
#
#        # Identify network interfaces based on IP addresses
#        INTERNAL_IFACE=$(ip addr show | grep "$internal_ip" | awk '{print $NF}')
#        EXTERNAL_IFACE=$(ip addr show | grep "$external_ip" | awk '{print $NF}')
#
#        # Check if interfaces are found
#        if [ -z "$INTERNAL_IFACE" ] || [ -z "$EXTERNAL_IFACE" ]; then
#          echo "Failed to identify network interfaces."
#          exit 1
#        fi
#
#        # Apply iptables rules
#        iptables -A FORWARD -i $INTERNAL_IFACE -o $EXTERNAL_IFACE -j ACCEPT
#        iptables -A FORWARD -i $EXTERNAL_IFACE -o $INTERNAL_IFACE -j ACCEPT
#        iptables -t nat -A POSTROUTING -o $EXTERNAL_IFACE -j MASQUERADE
#        iptables -t nat -A POSTROUTING -o $INTERNAL_IFACE -j MASQUERADE
#
#        echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
#
#
#  ip_tables_deployment:
#    type: OS::Heat::SoftwareDeployment
#    properties:
#      config: { get_resource: set_ip_table_config }
#      server: { get_resource: Prototype }
#      input_values:
#        internal_ip: { get_attr: [ internal_CP, fixed_ips, 0, ip_address ] }
#        external_ip: { get_attr: [ external_CP, fixed_ips, 0, ip_address ] }


#  apache_config:
#    type: OS::Heat::SoftwareConfig
#    properties:
#      config: |
#        #!/bin/bash
#        echo "Name"
#
#  apache_deployment:
#    type: OS::Heat::SoftwareDeployment
#    properties:
#      config: { get_resource: apache_config }
#      server: { get_resource: Prototype }